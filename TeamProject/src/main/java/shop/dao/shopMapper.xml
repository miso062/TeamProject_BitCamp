<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="shopSQL">
	<select id="getImage" parameterType="int" resultType="productImg"> 
	  select * from pro_image where product_id = ${product_id}
	</select>

	<select id="getProduct" parameterType="int" resultType="product"> 
	  select * from product where product_id = ${product_id}
	</select>
	
	<select id="getSellList" parameterType="int" resultType="sellHistory">
		<!-- select size_type, min(sell_price) as sell_price from sell_history where product_id=${product_id} and status1='입찰중' group by size_type -->
		select * from sell_history
		where product_id=${product_id} 
		and (size_type, sell_price) in (select size_type, min(sell_price) as sell_price 
			from sell_history where product_id=${product_id} and status1='입찰중' 
			group by size_type)
	</select>
	
	<select id="getBuyList" parameterType="int" resultType="buyHistory">
		select * from buy_history where product_id=${product_id} and status1='입찰중'
	</select>
	
	<select id="getSellDTOById" parameterType="int" resultType="sellHistory">
		<!-- select * from (select * from sell_history order by sell_price) 
		where product_id=${product_id} and size_type=${size} and status1='입찰중' and <![CDATA[rownum <= 1 ]]> -->
		select * from sell_history where sell_id=#{sell}
	</select>
	
	<select id="getSellDTO" parameterType="int" resultType="sellHistory">
		select * from (select * from sell_history order by sell_price) 
		where product_id=${product_id} and size_type=${size} and status1='입찰중' and <![CDATA[rownum <= 1 ]]>
	</select>
	
	<select id="getBuyDTO" parameterType="java.util.Map" resultType="buyHistory">
		select * from (select * from buy_history order by buy_price desc) 
		where product_id=${product_id} and size_type=${size} and status1='입찰중' and <![CDATA[rownum <= 1 ]]>
	</select>
	
	<!-- 기본배송지 -->
	<select id="getDefalutAddress" parameterType="String" resultType="userAddress">
		select * from address where user_id=#{user_id} and flag=1
	</select>
	
	<!-- 해당 유저의 주소 리스트 -->
	<select id="getAddrList" parameterType="String" resultType="userAddress">
		select * from address where user_id=#{user_id} order by flag desc
	</select>
	
	<select id="getAddress" parameterType="int" resultType="userAddress">
		select * from address where address_id=${addr_id}
	</select>
  
	<select id="scrollProductList" parameterType="java.util.Map" resultType="shop">
		<!-- - 상품 4개씩 -->
		<!-- select * from (
			select rownum rn, tt.* from (
				select * from product where release_date is not null order by release_date desc)tt)
				where <![CDATA[rn>=${startNum} and rn<=${endNum} ]]> order by product_id -->
		select * from (
		    select rownum rn, tt.* from (
		        select product_id, sell_cnt, like_cnt, price, brand, collection, category, eng_name, kor_name, gender, file_path from 
		        (select product_id as mp_pi, count(*) as sell_cnt from market_price group by product_id) mp 
		        right join product p on mp_pi like p.product_id
		        left join (select product_id as lp_pi, count(*) as like_cnt from like_pro group by product_id) lp on lp_pi like p.product_id
		        left join (select product_id as sh_pi, min(sell_price) as price from sell_history group by product_id) sh on sh_pi like p.product_id
		        left join (select product_id as pi_pi, file_path from pro_image) pi on pi_pi like p.product_id
		        where post_status='판매중' and (category  like '%'||#{command}||'%' 
				or lower(eng_name) like lower('%'||#{command}||'%') 
				or kor_name like '%'||#{command}||'%')
                
              

		        order by sell_cnt desc nulls last
		    ) tt
		    <!--  <where>
		    	  <choose>
                    <when test='category != null'>
                        and category in 
                        <foreach collection="category" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </when>
                </choose>    
                    <if test='brand != null'>
                        and brand in 
                        <foreach collection="brand" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </if>
                <choose>
                    <when test='gender != null'>
                        and gender in 
                        <foreach collection="gender" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </when>
                </choose>
                    <if test='collection != null'>
                        and collection in 
                        <foreach collection="collection" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </if>
		    </where> -->
		     <where>
		    	  <choose>
                    <when test='category != null and category.size !=0'>
                        and category in 
                        <foreach collection="category" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </when>
                    <otherwise>
                    </otherwise>
                </choose>    
                    <if test='brand != null'>
                        and brand in 
                        <foreach collection="brand" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </if>
                <choose>
                    <when test='gender != null'>
                        and gender in 
                        <foreach collection="gender" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </when>
                    <otherwise>
                    </otherwise>
                </choose>
                    <if test='collection != null'>
                        and collection in 
                        <foreach collection="collection" item="item" index="index" separator="," open="(" close=")">
                            #{item}
                        </foreach>
                    </if>
		    </where>
		    
		    
		) aa where <![CDATA[rn>=${startNum} and rn<=${endNum} ]]>
			
			
				
				 
		
	</select>
	

	<select id="scrollBuyProductList" parameterType="java.util.Map" resultType="shop">
		select * from (
		    select rownum rn, tt.* from (
		        select product_id, sell_cnt, like_cnt, price, brand, collection, category, eng_name, kor_name, gender, file_path from 
		        (select product_id as mp_pi, count(*) as sell_cnt from market_price group by product_id) mp 
		        right join product p on mp_pi like p.product_id
		        left join (select product_id as lp_pi, count(*) as like_cnt from like_pro group by product_id) lp on lp_pi like p.product_id
		        left join (select product_id as sh_pi, min(sell_price) as price from sell_history group by product_id) sh on sh_pi like p.product_id
		        left join (select product_id as pi_pi, file_path from pro_image) pi on pi_pi like p.product_id
		        where post_status='판매중' 
		        order by price nulls last
		    ) tt where (category  like '%'||#{command}||'%' 
			or lower(eng_name) like lower('%'||#{command}||'%') 
			or kor_name like '%'||#{command}||'%')
		) aa where <![CDATA[rn>=${startNum} and rn<=${endNum} ]]>
	</select>
    
    <select id="scrollSellProductList" parameterType="java.util.Map" resultType="shop">
		select * from (
		    select rownum rn, tt.* from (
		        select product_id, sell_cnt, like_cnt, price, brand, collection, category, eng_name, kor_name, gender, file_path from 
		        (select product_id as mp_pi, count(*) as sell_cnt from market_price group by product_id) mp 
		        right join product p on mp_pi like p.product_id
		        left join (select product_id as lp_pi, count(*) as like_cnt from like_pro group by product_id) lp on lp_pi like p.product_id
		        left join (select product_id as bh_pi, max(buy_price) as price from buy_history group by product_id) bh on bh_pi like p.product_id
		        left join (select product_id as pi_pi, file_path from pro_image) pi on pi_pi like p.product_id
		        where post_status='판매중' 
		        order by price desc nulls last
		    ) tt where (category  like '%'||#{command}||'%' 
			or lower(eng_name) like lower('%'||#{command}||'%') 
			or kor_name like '%'||#{command}||'%')
		) aa where <![CDATA[rn>=${startNum} and rn<=${endNum} ]]>
	</select>
  
	<select id="getChart" parameterType="int" resultType="marketPrice">
		select * from market_price where product_id=${product_id} order by signing_date
	</select>
	
	<select id="getBuyHistory" parameterType="Int" resultType="Int">
		select min(sell_price) from sell_history where product_id=${product_id} and status1='입찰중'
	</select>
	
	<select id="getSellHistory" parameterType="Int" resultType="Int">
		select max(buy_price) from buy_history where product_id=${product_id} and status1='입찰중'
	</select>
	
	<select id="getSigningDatePrice" parameterType="Int" resultType="marketPrice">
		select * from (select * from market_price where product_id=${product_id} order by signing_date desc) where <![CDATA[rownum <= 1 ]]>
	</select>
	
	<select id="getLikeProduct" parameterType="Int" resultType="Int">
		select count(*) from like_pro where product_id = ${product_id}
	</select>
	
	<insert id="insertBuyPay" parameterType="buyHistory">
		insert into buy_history(buy_id, product_id, address_id, user_id, buy_price, period, size_type, cum_uid, status1, buy_date)
			values(buy_history_seq.nextval, #{product_id}, #{address_id}, #{user_id}, #{buy_price}, #{period}, #{size_type}, #{cum_uid}, #{status1}, sysdate)
	</insert>
	
	<update id="insertBuyPayBySellId" parameterType="java.util.Map">
		{call 
			declare
				b_id	number(7);
			begin
			
			insert into buy_history(buy_id, product_id, address_id, user_id, buy_price, period, size_type, cum_uid, status1, buy_date)
				values(buy_history_seq.nextval, 
						#{buy_historyDTO.product_id}, 
						#{buy_historyDTO.address_id}, 
						#{buy_historyDTO.user_id}, 
						#{buy_historyDTO.buy_price}, 
						#{buy_historyDTO.period}, 
						#{buy_historyDTO.size_type}, 
						#{buy_historyDTO.cum_uid}, 
						#{buy_historyDTO.status1}, 
						sysdate);
			
			update sell_history set status1='판매대기중' where sell_id=${sell};
			end
		}
	</update>
	
	<select id="getNewBuyDTO" resultType="buyHistory">
		select * from buy_history where buy_id=(select (LAST_NUMBER-1) from USER_SEQUENCES WHERE SEQUENCE_NAME='BUY_HISTORY_SEQ')
	</select>
	
	<insert id="insertSellPay" parameterType="buyHistory">
		insert into sell_history(sell_id, product_id, address_id, user_id, sell_price, period, size_type, account, status1, sell_date)
			values(sell_history_seq.nextval, #{product_id}, #{address_id}, #{user_id}, #{sell_price}, #{period}, #{size_type}, #{account}, #{status1}, sysdate)
	</insert>
	
	<update id="insertSellPayBySellId" parameterType="java.util.Map">
		{call 
			declare
				b_id	number(7);
			begin
			
			insert into sell_history(sell_id, product_id, address_id, user_id, sell_price, period, size_type, account, status1, sell_date)
				values(sell_history_seq.nextval, 
						#{sell_historyDTO.product_id}, 
						#{sell_historyDTO.address_id}, 
						#{sell_historyDTO.user_id}, 
						#{sell_historyDTO.sell_price}, 
						#{sell_historyDTO.period}, 
						#{sell_historyDTO.size_type}, 
						#{sell_historyDTO.account}, 
						#{sell_historyDTO.status1}, 
						sysdate);
			
			update buy_history set status1='결제완료' where buy_id=${buy};
			end
		}
	</update>
	
	<select id="getNewSellDTO" resultType="sellHistory">
		select * from sell_history where sell_id=(select (LAST_NUMBER-1) from USER_SEQUENCES WHERE SEQUENCE_NAME='SELL_HISTORY_SEQ')
	</select>
	
	<select id="getshopDetaillist" parameterType="Int" resultType="marketPrice">
		select * from (select * from market_price where product_id=${product_id} order by signing_date desc) where <![CDATA[rownum <= 5 ]]>
  	</select>
  	
  	<select id="getBuyDTOById" parameterType="Int" resultType="buyHistory">
  		select * from buy_history where buy_id=${bid}
  	</select>
	
	
</mapper>